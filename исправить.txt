---- 1. Символьный код раздела/продукта должен быть с маленькой буквы и нормальные имена добавить.
---- 2. Добавить иерархию разделов в фильтрации продуктов
---- 3. Попробовать использовать joi
---- 4. В форме разделов/продуктов сделать блок с картинками со скролом
---- 5. Исправить ошибки с запросом на бекенд (редактирование, добавление)
---- 6. Только два уровня разделов
7. разделы перемесить в правый угол
---- 8. Настроить переиндексацию elastic, каждую минуту @nestjs/schedule. Создать новый модуль Tasк для schedule
---- 9. Написать общий метод для образования ответа от метода, который связана с бд (
      const searchParams: payLoad = {
        type: data.type,
        from: Number(data.from),
        size: Number(data.size),
        searchName: data.searchName,
      };
      return data.getSection
        ? await this.EsServices.getItemsFilter(searchParams)
        : id;
)
10. Изучить scss
11. Избавиться от MaterialIcon, использовать SVG из Figma
12. Изучить верстку flex и Grid
13. Везде привести к методологии БЭМ
---- 14. Создать таблицу в БД с цветами (id, name, hex)

Агрегация в elastic

1. Запрос к разделу каталога и детальной странице должен иметь один роут api/v4/catalog/....
2. На бэкенде перед получением данных раздела или детальной страницы ты должен уметь по урлу определять тип страницы (раздел или детальная страница)
3. Для определения типа в params передавать url страницы в формате (/catalog/...../)
4. Определение типа должнол работать следующим образом:
  a. Делаем запрос в эластик в качестве входного параметра передаем туда url, поля должен стать keyword.
  b. По полученному ответу ты отпределяешь тип.
5. В зависимости от типа строишь логику получаемых данных раздел или детальная страница
6. На фронте делаешь два разных стора, один стор для детальной страницы, второй для раздела.

Правило работы запроса:
Когда ты загружаешь страницы у тебя прихзодят все данные
Входные параметры:

{
 utl: string
 filter: {},
 layout: bool,
 onlyFilters: false,
}

{
  status: '200',
  data: {
    content : {
      products: [],
      parentSections: [],
      filters: []
    },
    layout: null
  }
}

При использовании фильтров:

 {
  utl: string
  filter: {},
  layout: false,
  onlyFilters: true,
 }

 {
   status: '200',
   data: {
     content : {
       filters: []
     },
   }
 }

 filter: {
    sorting: ['none', 'newProduct', 'ascPrice', 'descPrice'],
    price: {from: 0, to: 100},
    color: ['black', 'white', 'green']
 }

 {
  utl: string
   filter: {
      sorting: ['none', 'newProduct', 'ascPrice', 'descPrice'],
      price: {from: 0, to: 100},
      color: ['black', 'white', 'green']
   },
  layout: bool,
  onlyFilters: false,
 }
